plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.+'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

version = "${version}"
group = 'com.mrbysco.blockhistory' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Block-History-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings  channel: "${mcp_channel}", version: "${mcp_mappings}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
            mods {
                blockhistory {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
            mods {
                blockhistory {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'blockhistory', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                blockhistory {
                    source sourceSets.main
                }
            }
        }

        all {
            lazyToken('minecraft_classpath') {
                configurations.shadow.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation ("org.tmatesoft.sqljet:sqljet:${sqljet_version}")
    shadow ("org.tmatesoft.sqljet:sqljet:${sqljet_version}")
}

artifacts {
    archives shadowJar
}

jar.finalizedBy('reobfJar')

shadowJar {
    project.configurations.shadow.setTransitive(true)
    configurations = [project.configurations.shadow]

    classifier ''
}

reobf {
    shadowJar{}
}

build.dependsOn shadowJar

jar {
    manifest {
        attributes([
                "Specification-Title": "blockhistory",
                "Specification-Vendor": "Mrbysco",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(reobfArtifact) {
                builtBy reobfArtifact
                artifactId = archivesBaseName
                classifier null
            }
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/minecraft"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}
