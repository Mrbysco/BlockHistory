plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.60'
    id 'net.darkhax.curseforgegradle' version '1.1.17'
    id 'com.modrinth.minotaur' version "2.+"
}

version = "${version}"
group = "${mod_group}"
base {
    archivesName = "Block-History-${mc_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
jarJar.enable()

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'

        dependencies {
            runtime("org.tmatesoft.sqljet:sqljet:${sqljet_version}") {
                exclude group: 'org.antlr', module: 'ST4'
                exclude group: 'org.antlr', module: 'stringtemplate'
                exclude group: 'antlr', module: 'antlr'
            }
        }

        //Limit ram usage for the dev environment to 4GB
        jvmArgument '-Xmx4G'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
        programArgument '--nogui'
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation("org.tmatesoft.sqljet:sqljet:${sqljet_version}") {
        exclude group: 'org.antlr', module: 'ST4'
        exclude group: 'org.antlr', module: 'stringtemplate'
        exclude group: 'antlr', module: 'antlr'
    }
    jarJar(group: 'org.tmatesoft.sqljet', name: 'sqljet', version: "${sqljet_version}") {
        jarJar.pin(it, "${sqljet_version}")
        jarJar.ranged(it, "[${sqljet_version},1.2.0)")
    }
    jarJar(group: 'org.antlr', name: 'antlr-runtime', version: "3.4") {
        jarJar.pin(it, "3.4")
        jarJar.ranged(it, "[3.4,3.5)")
        exclude group: 'org.antlr', module: 'ST4'
        exclude group: 'org.antlr', module: 'stringtemplate'
        exclude group: 'antlr', module: 'antlr'
        transitive(false)
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "Mrbysco",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}



tasks.jarJar.configure {
    archiveClassifier.set("")
}

tasks.jar.configure {
    it.archiveClassifier.set("slim")
}

tasks.build.dependsOn tasks.jarJar
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifact project.tasks.jarJar
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

if (System.getenv().CURSEFORGE_KEY) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv().CURSEFORGE_KEY

        def mainFile = upload(project.curseforge_id, project.tasks.jarJar)
        mainFile.releaseType = 'beta'
        mainFile.addGameVersion "NeoForge"
        mainFile.addGameVersion "${mc_version}"
        mainFile.addGameVersion "Java 17"

        mainFile.changelog = file("$project.rootDir/changelog.md")
        mainFile.changelogType = 'markdown'

//        mainFile.addRequirement()
//        mainFile.addOptional()
    }
}

if (System.getenv().MODRINTH_KEY) {
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "beta"
        versionName = "${mod_name} ${mc_version}"
        versionNumber = project.version
        uploadFile = project.tasks.jarJar
        changelog = file("$project.rootDir/changelog.md").text
        gameVersions = ["${mc_version}"]
        loaders = ["neoforge"]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}